// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout components should render <Layout /> correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CoreLayout>
    <div />
  </CoreLayout>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Header
          className="col leftCol"
        />,
        <div
          className="mainContainer col rightCol"
        >
          <Navigation />
          <div />
          <Link
            className="forgotPasswordLink"
            data-qa-sel="forgotPassword-link"
            onlyActiveOnIndex={false}
            style={Object {}}
            to="/forgotPassword"
          >
            Forgot password?
          </Link>
        </div>,
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "col leftCol",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Navigation />,
            <div />,
            <Link
              className="forgotPasswordLink"
              data-qa-sel="forgotPassword-link"
              onlyActiveOnIndex={false}
              style={Object {}}
              to="/forgotPassword"
            >
              Forgot password?
            </Link>,
          ],
          "className": "mainContainer col rightCol",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Forgot password?",
              "className": "forgotPasswordLink",
              "data-qa-sel": "forgotPassword-link",
              "onlyActiveOnIndex": false,
              "style": Object {},
              "to": "/forgotPassword",
            },
            "ref": null,
            "rendered": "Forgot password?",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header
            className="col leftCol"
          />,
          <div
            className="mainContainer col rightCol"
          >
            <Navigation />
            <div />
            <Link
              className="forgotPasswordLink"
              data-qa-sel="forgotPassword-link"
              onlyActiveOnIndex={false}
              style={Object {}}
              to="/forgotPassword"
            >
              Forgot password?
            </Link>
          </div>,
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "col leftCol",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Navigation />,
              <div />,
              <Link
                className="forgotPasswordLink"
                data-qa-sel="forgotPassword-link"
                onlyActiveOnIndex={false}
                style={Object {}}
                to="/forgotPassword"
              >
                Forgot password?
              </Link>,
            ],
            "className": "mainContainer col rightCol",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Forgot password?",
                "className": "forgotPasswordLink",
                "data-qa-sel": "forgotPassword-link",
                "onlyActiveOnIndex": false,
                "style": Object {},
                "to": "/forgotPassword",
              },
              "ref": null,
              "rendered": "Forgot password?",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFourteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
