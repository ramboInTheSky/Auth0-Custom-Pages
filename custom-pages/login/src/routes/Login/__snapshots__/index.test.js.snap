// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login components should render <Login /> correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Fieldset
          legend="Personal information"
        >
          <Input
            data-qa-sel="login-email"
            id="username"
            label="Email"
            name="username"
            onChange={[Function]}
            placeholder="eg: your.name@example.com..."
            type="email"
          />
          <Input
            data-qa-sel="login-password"
            label="Password"
            name="password"
            onChange={[Function]}
            type="password"
          />
        </Fieldset>,
        <div>
          <button
            className="btn btn--cta"
            data-qa-sel="login-button"
            onClick={[Function]}
          >
            Sign in
          </button>
        </div>,
      ],
      "className": "",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            null,
            false,
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />,
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />,
          ],
          "legend": "Personal information",
        },
        "ref": null,
        "rendered": Array [
          null,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-email",
              "id": "username",
              "label": "Email",
              "name": "username",
              "onChange": [Function],
              "placeholder": "eg: your.name@example.com...",
              "type": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-password",
              "label": "Password",
              "name": "password",
              "onChange": [Function],
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign in",
              "className": "btn btn--cta",
              "data-qa-sel": "login-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign in",
            "type": "button",
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Fieldset
            legend="Personal information"
          >
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />
          </Fieldset>,
          <div>
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>
          </div>,
        ],
        "className": "",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              null,
              false,
              <Input
                data-qa-sel="login-email"
                id="username"
                label="Email"
                name="username"
                onChange={[Function]}
                placeholder="eg: your.name@example.com..."
                type="email"
              />,
              <Input
                data-qa-sel="login-password"
                label="Password"
                name="password"
                onChange={[Function]}
                type="password"
              />,
            ],
            "legend": "Personal information",
          },
          "ref": null,
          "rendered": Array [
            null,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-email",
                "id": "username",
                "label": "Email",
                "name": "username",
                "onChange": [Function],
                "placeholder": "eg: your.name@example.com...",
                "type": "email",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-password",
                "label": "Password",
                "name": "password",
                "onChange": [Function],
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="btn btn--cta"
                data-qa-sel="login-button"
                onClick={[Function]}
              >
                Sign in
              </button>,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sign in",
                "className": "btn btn--cta",
                "data-qa-sel": "login-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Sign in",
              "type": "button",
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFourteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Login components should render correctly when there is an error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Fieldset
          legend="Personal information"
        >
          <Alert
            type="error"
          >
            this is an error
             
          </Alert>
          <Input
            data-qa-sel="login-email"
            id="username"
            label="Email"
            name="username"
            onChange={[Function]}
            placeholder="eg: your.name@example.com..."
            type="email"
          />
          <Input
            data-qa-sel="login-password"
            label="Password"
            name="password"
            onChange={[Function]}
            type="password"
          />
        </Fieldset>,
        <div>
          <button
            className="btn btn--cta"
            data-qa-sel="login-button"
            onClick={[Function]}
          >
            Sign in
          </button>
        </div>,
      ],
      "className": "",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Alert
              type="error"
            >
              this is an error
               
            </Alert>,
            false,
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />,
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />,
          ],
          "legend": "Personal information",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "this is an error",
                " ",
                null,
              ],
              "type": "error",
            },
            "ref": null,
            "rendered": Array [
              "this is an error",
              " ",
              null,
            ],
            "type": [Function],
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-email",
              "id": "username",
              "label": "Email",
              "name": "username",
              "onChange": [Function],
              "placeholder": "eg: your.name@example.com...",
              "type": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-password",
              "label": "Password",
              "name": "password",
              "onChange": [Function],
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign in",
              "className": "btn btn--cta",
              "data-qa-sel": "login-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign in",
            "type": "button",
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Fieldset
            legend="Personal information"
          >
            <Alert
              type="error"
            >
              this is an error
               
            </Alert>
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />
          </Fieldset>,
          <div>
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>
          </div>,
        ],
        "className": "",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Alert
                type="error"
              >
                this is an error
                 
              </Alert>,
              false,
              <Input
                data-qa-sel="login-email"
                id="username"
                label="Email"
                name="username"
                onChange={[Function]}
                placeholder="eg: your.name@example.com..."
                type="email"
              />,
              <Input
                data-qa-sel="login-password"
                label="Password"
                name="password"
                onChange={[Function]}
                type="password"
              />,
            ],
            "legend": "Personal information",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  "this is an error",
                  " ",
                  null,
                ],
                "type": "error",
              },
              "ref": null,
              "rendered": Array [
                "this is an error",
                " ",
                null,
              ],
              "type": [Function],
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-email",
                "id": "username",
                "label": "Email",
                "name": "username",
                "onChange": [Function],
                "placeholder": "eg: your.name@example.com...",
                "type": "email",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-password",
                "label": "Password",
                "name": "password",
                "onChange": [Function],
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="btn btn--cta"
                data-qa-sel="login-button"
                onClick={[Function]}
              >
                Sign in
              </button>,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sign in",
                "className": "btn btn--cta",
                "data-qa-sel": "login-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Sign in",
              "type": "button",
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFourteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Login components should render correctly when there is username and password 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Fieldset
          legend="Personal information"
        >
          <Input
            data-qa-sel="login-email"
            id="username"
            label="Email"
            name="username"
            onChange={[Function]}
            placeholder="eg: your.name@example.com..."
            type="email"
          />
          <Input
            data-qa-sel="login-password"
            label="Password"
            name="password"
            onChange={[Function]}
            type="password"
          />
        </Fieldset>,
        <div>
          <button
            className="btn btn--cta"
            data-qa-sel="login-button"
            onClick={[Function]}
          >
            Sign in
          </button>
        </div>,
      ],
      "className": "",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            null,
            false,
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />,
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />,
          ],
          "legend": "Personal information",
        },
        "ref": null,
        "rendered": Array [
          null,
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-email",
              "id": "username",
              "label": "Email",
              "name": "username",
              "onChange": [Function],
              "placeholder": "eg: your.name@example.com...",
              "type": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "data-qa-sel": "login-password",
              "label": "Password",
              "name": "password",
              "onChange": [Function],
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign in",
              "className": "btn btn--cta",
              "data-qa-sel": "login-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign in",
            "type": "button",
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Fieldset
            legend="Personal information"
          >
            <Input
              data-qa-sel="login-email"
              id="username"
              label="Email"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />
            <Input
              data-qa-sel="login-password"
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />
          </Fieldset>,
          <div>
            <button
              className="btn btn--cta"
              data-qa-sel="login-button"
              onClick={[Function]}
            >
              Sign in
            </button>
          </div>,
        ],
        "className": "",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              null,
              false,
              <Input
                data-qa-sel="login-email"
                id="username"
                label="Email"
                name="username"
                onChange={[Function]}
                placeholder="eg: your.name@example.com..."
                type="email"
              />,
              <Input
                data-qa-sel="login-password"
                label="Password"
                name="password"
                onChange={[Function]}
                type="password"
              />,
            ],
            "legend": "Personal information",
          },
          "ref": null,
          "rendered": Array [
            null,
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-email",
                "id": "username",
                "label": "Email",
                "name": "username",
                "onChange": [Function],
                "placeholder": "eg: your.name@example.com...",
                "type": "email",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data-qa-sel": "login-password",
                "label": "Password",
                "name": "password",
                "onChange": [Function],
                "type": "password",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="btn btn--cta"
                data-qa-sel="login-button"
                onClick={[Function]}
              >
                Sign in
              </button>,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sign in",
                "className": "btn btn--cta",
                "data-qa-sel": "login-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Sign in",
              "type": "button",
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFourteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
